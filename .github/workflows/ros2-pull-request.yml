name: ROS 2 Jazzy CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  format-check:
    runs-on: ubuntu-24.04
    container:
      image: osrf/ros:jazzy-desktop
      options: --user root
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
      - name: Check for incorrect file extensions
        run: |
          INCORRECT_EXTENSIONS=$(find . -type f \( -name "*.h" -o -name "*.cc" \) | grep -v "build/" | grep -v "install/" | sort)
          if [ -n "$INCORRECT_EXTENSIONS" ]; then
            echo "ERROR: Found files with incorrect extensions:"
            echo "$INCORRECT_EXTENSIONS"
            echo ""
            echo "According to project standards:"
            echo "  - Header files should use .hpp extension instead of .h"
            echo "  - Implementation files should use .cpp extension instead of .cc"
            exit 1
          else
            echo "✓ No files with incorrect extensions found."
          fi
      - name: Check formatting
        shell: bash
        run: |
          echo "===== CHECKING C++ CODE FORMATTING ====="
          CPP_FILES=$(find . -type f \( -name "*.cpp" -o -name "*.hpp" \) | grep -v "build/" | grep -v "install/")
          if [ -n "$CPP_FILES" ]; then
            FORMAT_ISSUES=0
            ISSUES_LIST=""
            TOTAL_FILES=0
            FORMATTED_FILES=0
            echo "Scanning all C++ files for formatting issues..."
            for file in $CPP_FILES; do
              TOTAL_FILES=`expr $TOTAL_FILES + 1`
              if ! clang-format -style=file --dry-run -Werror "$file" &>/dev/null; then
                FORMAT_ISSUES=`expr $FORMAT_ISSUES + 1`
                ISSUES_LIST="$ISSUES_LIST\n  - $file"
                echo "❌ File needs formatting: $file"
                FORMATTED=$(clang-format -style=file "$file")
                DIFF=$(diff -u <(cat "$file") <(echo "$FORMATTED") | head -10)
                echo "$DIFF" | sed 's/^/    /'
                DIFF_LINES=$(echo "$DIFF" | wc -l)
                if [ $DIFF_LINES -gt 10 ]; then
                  echo "    ... (showing only first 10 lines of diff)"
                fi
                echo ""
              else
                FORMATTED_FILES=`expr $FORMATTED_FILES + 1`
              fi
            done
            echo -e "\n===== FORMATTING CHECK SUMMARY ====="
            echo "Total files scanned: $TOTAL_FILES"
            echo "Files with correct formatting: $FORMATTED_FILES"
            echo "Files needing formatting: $FORMAT_ISSUES"

            if [ $FORMAT_ISSUES -ne 0 ]; then
              echo -e "\nThe following files need formatting:$ISSUES_LIST"
              echo -e "\nRun the following command to fix all formatting issues:"
              echo "find . -name \"*.cpp\" -o -name \"*.hpp\" | grep -v \"build/\" | grep -v \"install/\" | xargs clang-format -style=file -i"
              exit 1
            else
              echo -e "\n✅ All C++ files are properly formatted."
            fi
          else
            echo "No C++ files found to check."
          fi

  build-and-test-ubuntu:
    needs: format-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        arch: [amd64, arm64, arm32]
    runs-on: ${{ matrix.os }}
    container:
      image: osrf/ros:jazzy-desktop
      options: --user root
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools
        run: |
          apt-get update
          apt-get install -y python3-colcon-common-extensions python3-rosdep python3-vcstool git \
            libboost-all-dev libgmock-dev python3-pip ros-jazzy-ament-copyright

      - name: Update rosdep database
        run: rosdep update || true

      - name: Install dependencies
        run: |
          rosdep install --from-paths . --ignore-src -r -y

      - name: Build project
        shell: bash
        run: |
          . /opt/ros/jazzy/setup.bash
          colcon build --cmake-args -DBUILD_TESTING=On

      - name: Run tests
        shell: bash
        run: |
          . /opt/ros/jazzy/setup.bash
          . install/setup.bash
          colcon test --event-handlers console_cohesion+
          colcon test-result

      - name: Upload test results
        if: ${{ !env.ACT && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu-${{ matrix.arch }}
          path: build/ros2_test_framework_examples/test_results